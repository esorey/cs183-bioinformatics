import random

def compute_pwm(kmers):
    '''Given a list of kmers, compute the pwm. Format is
    [{*char* : probability}]'''
    pwm = []
    k = len(kmers[0])
    n = len(kmers)
    for i in range(k):
        chars = [kmer[i] for kmer in kmers]
        prob_dict = {'A': 0, 'T': 0, 'G': 0, 'C': 0}
        for char in chars:
            prob_dict[char] += 1 / n
        pwm.append(prob_dict)
    return pwm

def get_random_pwm(seq_list, k):
    '''For each sequence in seq_list, pick a random kmer. Then compute and
    return the PWM generated by these kmers. We assume that the sequences
    have only letters A, C, G, T.'''
    kmers = []
    for seq in seq_list:
        n_kmers = len(seq) - k + 1
        # Add a random kmer from this sequence to the list of kmers
        random_idx = random.choice(range(n_kmers))
        random_kmer = seq[random_idx:random_idx + k]
        kmers.append(random_kmer)

    pwm = compute_pwm(kmers)

    return pwm

def randomized_search(seq_list, k, num_iters):
    '''Run the randomized search algorithm as described in HW1 for num_iters
    iterations.'''
    # Pick random kmer from each sequence and initialize the PWM.
    pwm = get_random_pwm(seq_list, k)

    # Run the algorithm for num_iters iterations
    for _ in range(num_iters):
        # Find highest scoring kmer for each sequence
        best_kmers = []
        for seq in seq_list:
            best_kmer = ''
            best_score = -1
            for i in range(len(seq) - k + 1):
                kmer = seq[i:i + k]
                # Get this kmer's score
                score = 1
                for j in range(k):
                    char = kmer[j]
                    score *= pwm[j][char]
                # If this is a better score, keep it
                if score > best_score:
                    best_kmer = kmer
                    best_score = score
            # Keep the best scoring kmer for this sequence
            assert best_score > -1
            assert best_kmer != ''
            best_kmers.append(best_kmer)

            # Recompute the PWM
            pwm = compute_pwm(best_kmers)

    # Once we're done, return the PWM
    return pwm

# Run the algorithm on the given sequences
with open('sequences.txt') as f:
    content = f.readlines()
content = [x.strip() for x in content]

# We'll use k=4
print(randomized_search(content, 4, 1))
print(randomized_search(content, 4, 10))
print(randomized_search(content, 4, 1000))
